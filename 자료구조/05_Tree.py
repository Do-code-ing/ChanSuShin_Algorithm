# 트리

# 연결리스트를 세로로 놓은것과 같다고 생각하면 된다.

# 부모
# 자식
# 자식의 자식
# 자식의 자식의 자식
# ...

# 이진트리

# 부모마다 자식이 없거나, 하나 있거나, 둘 있거나 하는 트리

# 각 부모나 자식마다 노드라 부르고
# 연결된 것을 링크(link), 엣지(edge)라 부른다
# 맨 위의 부모를 루트(root) 노드라 부른다.
# 자식이 없는 노드를 리프(leaf) 노드라 부른다.
# 최고 조상인 첫 번째 부모 노드가 있는 지점을 level 0이라 부른다.
# level 0에서 파생된 자식 노드 지점을 level 1로 부른다.
# 쭉쭉쭉 level n으로 부른다.
# 제일 마지막 level이 4라면 트리의 높이를 4라한다.
# 경로(path) : v에서 w로 가는데 어느 노드를 거쳐 가느냐를 나타낸다.
#           3
#       2       5
#    -6    7       9
#        8
#      -8 12
# 3 -> 2 -> 7 -> 8 -> 12 이런식으로 표현한다.
# 출발 노드 : 3
# 도착 노드 : 12
# 경유 노드 : 2, 7, 8
# 경로 길이(path length) : 경로에 포함된 edge의 갯수, 4
# 같은 level에 같은 부모를 둔 노드를 형제 노드라 부른다.

#       a
#   b       c
#     d   e   f
# 표현법 1: 리스트 : level 0 -> level 1 -> ...
A = ["a", "b", "c", None, "d", "e", "f"]
# level 0  1    1    2     2    2    2
# 표현법 2: 리스트 : 재귀적으로 표현
A = ["a", ["a의 왼쪽 부트리"], ["a의 오른쪽 부트리"]] # 를 아래와 같이 표현
A = ["a", ["b", [None], ["d", [None], [None]]], ["c", ["e", [None], [None]], ["f", [None], [None]]]]
# 자식이 둘다 None인 경우 리프 노드로 판단할 수 있다.
# 표현법 3: 노드 class 정의
#   parent
#    key
# left right 와 같은 형식으로 표현
# 총 최소 4개의 멤버로 저장할 수 있다. (key, value로 저장하면 그 이상)